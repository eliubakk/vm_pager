#include <iostream>
#include <cstring>
#include <unistd.h>
#include <cassert>
#include "vm_app.h"

using namespace std;

int main()
{
    fork();

    /* Processes
     *      0
     *     /
     *    1
     *
     * Queue: [1]
     */
    char *filename = (char *) vm_map(nullptr, 0);
    strcpy(filename, "data1.bin");
    //PID = 0
    //physmem = [zero, filename = rw]
    //clock = [1 = filename[2]]

    char *a = (char *) vm_map (filename, 0);
    a[150] = 'a';
    char *a2 = (char *) vm_map (nullptr, 0);

    fork();

    /* Processes
     *      0
     *     / \
     *    1   2
     *
     * Queue: [1, 2]
     *
     * Processes
     *      1
     *     /
     *    3
     * 
     * Queue: [2, 0, 3]
     */
    a[0] = 'b';
    a2[0] = 'c';
    char *a3 = (char *) vm_map(nullptr, 0);

    vm_yield();
    //From 0 -> 1: [2, 0] 
    //From 1 -> 2: [0, 3, 1]
    //From 2 -> 0: [3, 1, 2]
    //From 3 -> 1: [2, 0, 3]

    a[0] = 'd';
    a2[0] = 'e';
    a3[0] = 'f';
    char *a4 = (char *) vm_map(nullptr, 0);
    a[0] = 'g';
    a2[0] = 'h';
    a3[0] = 'i';
    a4[0] = 'j';
    char *a5 = (char *) vm_map(nullptr, 0);
    a[0] = 'k';
    a2[0] = 'l';
    a3[0] = 'm';
    a4[0] = 'n';
    a5[0] = 'o';

    vm_yield();
    //From 0 -> 3: [1, 2, 0]
    //From 1 -> 2: [0, 3, 1]
    //From 2 -> 0: [3, 1, 2]
    //From 3 -> 1: [2, 4, 0, 3]

    char *a6 = (char *) vm_map(filename, 0);
    a6 = a5;
    a6[0] = 'p';
    a5 = a;
    char *a7 = (char *) vm_map(nullptr, 0);

    fork();
    /* Processes
     *      0
     *    / | \
     *   1  2  4
     *
     * Queue: [3, 1, 2, 4] 
     *
     * Processes
     *      1
     *     / \
     *    3   5
     *
     * Queue: [2, 4, 0, 3, 5]
     *
     * Processes
     *      2
     *     /
     *    6
     *
     * Queue: [4, 0, 3, 5, 1, 6]
     *
     * Processes
     *      3
     *     /
     *    9
     *
     * Queue: [5, 1, 6, 2, 4, 7, 8, 9]
     */

    a7[0] = 'q';
    char *a8 = (char *) vm_map(filename, 0);

    vm_yield();
    //From 0 -> 3: [1, 2, 4, 0]
    //From 1 -> 2: [4, 0, 3, 5, 1]
    //From 2 -> 4: [0, 3, 5, 1, 6, 2]
    //From 4 -> 0: [3, 5, 1, 6, 2, 4]
    //From 3 -> 5: [1, 6, 2, 4, 7, 8, 9, 3]
    //From 5 -> 1: [6, 2, 4, 7, 8, 9, 3, 5]
    //From 6 -> 2: [4, 7, 8, 9, 3, 5, 10, 11, 6]
    //From 9 -> 3: [5, 10, 11, 6, 12, 13, 14, 15, 16, 9]

    a8[0] = a4[0];
    a8[1] = 'r';

    fork();
    /* Processes
     *     _ 0 _
     *   /  / \  \
     *  1  2   4  7
     *
     * Queue: [3, 5, 1, 6, 2, 4, 7] 
     *
     * Processes
     *       1
     *     / | \
     *    3  5 10
     *
     * Queue: [6, 2, 4, 7, 8, 9, 3, 5, 10]
     *
     * Processes
     *      2
     *     / \
     *    6  12
     *
     * Queue: [4, 7, 8, 9, 3, 5, 10, 11, 6, 12]
     *
     * Processes
     *     4
     *    /
     *   14
     *
     * Queue: [7, 8, 9, 3, 5, 10, 11, 6, 12, 13, 14]
     *
     * Processes
     *      3
     *     / \
     *    9   17
     *
     * Queue: [5, 10, 11, 6, 12, 13, 14, 15, 16, 9, 17]
     *
     * Processes
     *     5
     *    /
     *   19
     *
     * Queue: [10, 11, 6, 12, 13, 14, 15, 16, 9, 17, 18, 19]
     *
     * Processes
     *     6
     *    /
     *   22
     *
     * Queue: [12, 13, 14, 15, 16, 9, 17, 18, 19, 20, 21, 22]
     *
     * Processes
     *     9
     *    /
     *   26
     *
     * Queue: [17, 18, 19, 20, 21, 22, 23, 24, 25, 26]
     */

    assert(a[150] == 'a');
    strcpy(a4, "482 is fun :)");

    fork();
    /* Processes
     *     _  0  _
     *   /  / | \  \
     *  1  2  4  7  8
     *
     * Queue: [3, 5, 1, 6, 2, 4, 7, 8] 
     *
     * Processes
     *      _  1 _ 
     *    /   / \  \
     *   3   5  10  11
     *
     * Queue: [6, 2, 4, 7, 8, 9, 3, 5, 10, 11]
     *
     * Processes
     *      2
     *    / | \
     *   6  12 13
     *
     * Queue: [4, 7, 8, 9, 3, 5, 10, 11, 6, 12, 13]
     *
     * Processes
     *     4
     *    / \
     *   14 15
     *
     * Queue: [7, 8, 9, 3, 5, 10, 11, 6, 12, 13, 14, 15]
     *
     * Processes
     *     7
     *    /
     *   16
     * 
     * Queue: [8, 9, 3, 5, 10, 11, 6, 12, 13, 14, 15, 16]
     *
     * Processes
     *      3
     *    / | \
     *   9  17 18
     *
     * Queue: [5, 10, 11, 6, 12, 13, 14, 15, 16, 9, 17, 18]
     *
     * Processes
     *     5
     *    / \
     *   19 20
     *
     * Queue: [10, 11, 6, 12, 13, 14, 15, 16, 9, 17, 18, 19, 20]
     *
     * Processes 
     *     10
     *    /
     *   21
     * 
     * Queue: [11, 6, 12, 13, 14, 15, 16, 9, 17, 18, 19, 20, 21]
     *
     * Processes
     *     6
     *    / \
     *   22 23
     *
     * Queue: [12, 13, 14, 15, 16, 9, 17, 18, 19, 20, 21, 22, 23]
     *
     * Processes 
     *     12
     *    /
     *   24
     * 
     * Queue: [13, 14, 15, 16, 9, 17, 18, 19, 20, 21, 22, 23, 24]
     *
     * Processes 
     *     14
     *    /
     *   25
     * 
     * Queue: [15, 16, 9, 17, 18, 19, 20, 21, 22, 23, 24, 25]
     *
     * Processes
     *     9
     *    / \
     *   26 27
     *
     * Queue: [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]
     *
     * Processes
     *     17
     *    /
     *   28
     *
     * Queue: [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]
     *
     * Processes
     *     19
     *    /
     *   29
     *
     * Queue: [20, 21, 22, 23, 24, 25, 26, 27, 28, 29]
     * 
     * Processes
     *     22
     *    /
     *   30
     *
     * Queue: [23, 24, 25, 26, 27, 28, 29, 30]
     *
     * Processes
     *     26
     *    /
     *   31
     *
     * Queue: [27, 28, 29, 30, 31]
     */

    //From 0 -> 3: [5, 1, 6, 2, 4, 7, 8]
    //From 1 -> 6: [2, 4, 7, 8, 9, 3, 5, 10, 11]
    //From 2 -> 4: [7, 8, 9, 3, 5, 10, 11, 6, 12, 13]
    //From 4 -> 7: [8, 9, 3, 5, 10, 11, 6, 12, 13, 14, 15]
    //From 7 -> 8: [9, 3, 5, 10, 11, 6, 12, 13, 14, 15, 16]
    //From 8 -> 9: [3, 5, 10, 11, 6, 12, 13, 14, 15, 16]
    //From 3 -> 5: [10, 11, 6, 12, 13, 14, 15, 16, 9, 17, 18]
    //From 5 -> 10: [11, 6, 12, 13, 14, 15, 16, 9, 17, 18, 19, 20]
    //From 10 -> 11: [6, 12, 13, 14, 15, 16, 9, 17, 18, 19, 20, 21]
    //From 11 -> 6: [12, 13, 14, 15, 16, 9, 17, 18, 19, 20, 21]
    //From 6 -> 12: [13, 14, 15, 16, 9, 17, 18, 19, 20, 21, 22, 23]
    //From 12 -> 13: [14, 15, 16, 9, 17, 18, 19, 20, 21, 22, 23, 24]
    //From 13 -> 14: [15, 16, 9, 17, 18, 19, 20, 21, 22, 23, 24]
    //From 14 -> 15: [16, 9, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    //From 15 -> 16: [9, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    //From 16 -> 9: [17, 18, 19, 20, 21, 22, 23, 24, 25]
    //From 9 -> 17: [18, 19, 20, 21, 22, 23, 24, 25, 26, 27]
    //From 17 -> 18: [19, 20, 21, 22, 23, 24, 25, 26, 27, 28]
    //From 18 -> 19: [20, 21, 22, 23, 24, 25, 26, 27, 28]
    //From 19 -> 20: [21, 22, 23, 24, 25, 26, 27, 28, 29]
    //From 20 -> 21: [22, 23, 24, 25, 26, 27, 28, 29]
    //From 21 -> 22: [23, 24, 25, 26, 27, 28, 29]
    //From 22 -> 23: [24, 25, 26, 27, 28, 29, 30]
    //From 23 -> 24: [25, 26, 27, 28, 29, 30]
    //From 24 -> 25: [26, 27, 28, 29, 30]
    //From 25 -> 26: [27, 28, 29, 30]
    //From 26 -> 27: [28, 29, 30, 31]
    //From 27 -> 28: [29, 30, 31]
    //From 28 -> 29: [30, 31]
    //From 29 -> 30: [31]
    //From 30 -> 31: []
    //31 Finish
}